/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.net.URL;
import java.util.HashMap;
import java.util.Set;
import webcr.HashSerializer;

/**
 *
 * @author chabineza
 */
public class Canvas extends javax.swing.JFrame {

    /**
     * Creates new form Canvas
     *
     */
    public HashMap cashe = new HashMap();
    private String keyWord;

    public Canvas() {
        initComponents();
        this.jPanel1.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchKeyWordLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        keyWordField = new javax.swing.JTextField();
        documentSearchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outPutTextPane = new javax.swing.JTextPane();
        indexSearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchKeyWordLabel.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        searchKeyWordLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        searchKeyWordLabel.setText("Search String");
        searchKeyWordLabel.setFocusCycleRoot(true);
        searchKeyWordLabel.setFocusTraversalPolicyProvider(true);

        progressBar.setToolTipText("");
        progressBar.setString("0");
        progressBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                progressBarStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        keyWordField.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N

        documentSearchButton.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        documentSearchButton.setText("Document Search");
        documentSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                documentSearchButtonActionPerformed(evt);
            }
        });

        outPutTextPane.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(outPutTextPane);

        indexSearchButton.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        indexSearchButton.setText("Index Search");
        indexSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchKeyWordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(indexSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(95, 95, 95)
                                .addComponent(documentSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(keyWordField, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyWordField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchKeyWordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexSearchButton)
                    .addComponent(documentSearchButton))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        searchKeyWordLabel.getAccessibleContext().setAccessibleDescription("searchStr");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void documentSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_documentSearchButtonActionPerformed
        outPutTextPane.setText("");
        progressBar.setValue(0);
        keyWord = keyWordField.getText();
        if (keyWord == null || keyWord.equals("")) {
            System.out.println("Please enter a key word to search");
        } else {
            outPutTextPane.setVisible(true);
            new Thread() {
                @Override
                public void run() {
                    for (int i = 0; i <= 100; i++) {
                        try {
                            sleep(6);
                            progressBar.setValue(i);

                            if (progressBar.getValue() <= 99) {
                                jLabel2.setText("Search in progress, please wait ...");
                            } else {
                                jLabel2.setText("Search complete!");
                                String overAll = "";
                                Set<URL> set = search(keyWord);
                                if (set != null) {
                                    for (URL url : set) {
                                        overAll += url.toString() + '\n';
                                    }
                                }
                                outPutTextPane.setText(overAll);
                            }
                        } catch (InterruptedException ex) {
                            System.out.println("Something went wrong with the progress bar \n" + ex);
                        }
                    }

                }

                private Set<URL> search(String word) {
                    String[] keywords = word.split(" ");
                    HashSerializer hsr = new HashSerializer();
                    HashMap<String, Set<URL>> hm = (HashMap<String, Set<URL>>) HashSerializer.deSerialize("cache.ser");
                    Set<URL> combination = hm.get(keywords[0]);
                    if (keywords.length > 1) {
                        Set<URL> other;
                        for (int index = 1; index < keywords.length; index++) {
                            other = hm.get((keywords[index]));
                            if (other != null) {
                                combination.retainAll(other);
                            }
                        }
                        combination.addAll(hm.get(word));//the file where the whole string is found
                    }

                    return combination;
                }
            }.start();
        }
    }//GEN-LAST:event_documentSearchButtonActionPerformed

    private void progressBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_progressBarStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_progressBarStateChanged

    private void indexSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexSearchButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_indexSearchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton documentSearchButton;
    private javax.swing.JButton indexSearchButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keyWordField;
    private javax.swing.JTextPane outPutTextPane;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel searchKeyWordLabel;
    // End of variables declaration//GEN-END:variables

    public void setCache(HashMap c) {
        cashe = c;
    }

}
